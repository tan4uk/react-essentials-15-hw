{"version":3,"sources":["images/comment-icon.png","images/retweet-icon.png","images/like-icon.png","images/repost-icon.png","images/verified.png","images/down-arrow.png","components/post/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Post","props","className","alt","src","author","photo","name","verified","nickname","date","arrow","content","image","comment","comments","retweet","retweets","like","likes","repost","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,uRCsD5BC,MA7Cf,SAAcC,GACZ,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,aAAaC,IAAI,aAAaC,IAAKH,EAAMI,OAAOC,QAC/D,yBAAKJ,UAAU,kBACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,eACb,0BAAMA,UAAU,eAAeD,EAAMI,OAAOE,MAC5C,yBAAKJ,IAAI,WAAWD,UAAU,WAAWE,IAAKI,MAC9C,yBAAKN,UAAU,mBACb,0BAAMA,UAAU,mBAAmBD,EAAMI,OAAOI,UAChD,sCACA,0BAAMP,UAAU,gBAAgBD,EAAMS,QAG1C,yBAAKR,UAAU,QAAQC,IAAI,QAAQC,IAAKO,OAE1C,uBAAGT,UAAU,WAAWD,EAAMW,WAGlC,yBAAKV,UAAU,QACb,yBAAKA,UAAU,WAAWC,IAAI,UAAUC,IAAKH,EAAMY,QACnD,yBAAKX,UAAU,UACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,OAAOC,IAAI,UAAUC,IAAKU,MACzC,8BAAOb,EAAMc,WAEf,yBAAKb,UAAU,kBACb,yBAAKA,UAAU,OAAOC,IAAI,UAAUC,IAAKY,MACzC,8BAAOf,EAAMgB,WAEf,yBAAKf,UAAU,kBACb,yBAAKA,UAAU,OAAOC,IAAI,OAAOC,IAAKc,MACtC,8BAAOjB,EAAMkB,QAEf,yBAAKjB,UAAU,kBACb,yBAAKA,UAAU,OAAOC,IAAI,SAASC,IAAKgB,WCjBrCC,MAzBf,WAME,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,CACEG,OAAQ,CACNE,KAAM,mBACND,MATN,6FAUMG,SAAU,eAEZG,QAAQ,kDACRC,MAXJ,gGAYIH,KAAM,SACNK,SAAS,MACTE,SAAS,MACTE,MAAM,UCXMG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2937e0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/comment-icon.78400896.png\";","module.exports = __webpack_public_path__ + \"static/media/retweet-icon.d1608214.png\";","module.exports = __webpack_public_path__ + \"static/media/like-icon.82d568b2.png\";","module.exports = __webpack_public_path__ + \"static/media/repost-icon.d96eca86.png\";","module.exports = __webpack_public_path__ + \"static/media/verified.dfc0747d.png\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.92f0193e.png\";","import React from 'react';\r\nimport comment from '../../images/comment-icon.png';\r\nimport retweet from '../../images/retweet-icon.png';\r\nimport like from '../../images/like-icon.png';\r\nimport repost from '../../images/repost-icon.png';\r\nimport verified from '../../images/verified.png';\r\nimport arrow from '../../images/down-arrow.png';\r\nimport './style.css';\r\n\r\nfunction Post(props) {\r\n  return (\r\n    <div className=\"post-wrapper\">\r\n      <div className=\"header\">\r\n        <img className=\"author-pic\" alt=\"author-pic\" src={props.author.photo} />\r\n        <div className=\"header-content\">\r\n          <div className=\"header-top\">\r\n            <div className=\"author-info\">\r\n              <span className=\"author-name\">{props.author.name}</span>\r\n              <img alt=\"verified\" className=\"icon-ver\" src={verified} />\r\n              <div className=\"additional-info\">\r\n                <span className=\"author-nickname\">{props.author.nickname}</span>\r\n                <span>&#183;</span>\r\n                <span className=\"current-date\">{props.date}</span>\r\n              </div>\r\n            </div>\r\n            <img className=\"arrow\" alt=\"arrow\" src={arrow} />\r\n          </div>\r\n          <p className=\"content\">{props.content}</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"main\">\r\n        <img className=\"main-pic\" alt=\"ray-pic\" src={props.image} />\r\n        <div className=\"footer\">\r\n          <div className=\"icon-container\">\r\n            <img className=\"icon\" alt=\"comment\" src={comment} />\r\n            <span>{props.comments}</span>\r\n          </div>\r\n          <div className=\"icon-container\">\r\n            <img className=\"icon\" alt=\"retweet\" src={retweet} />\r\n            <span>{props.retweets}</span>\r\n          </div>\r\n          <div className=\"icon-container\">\r\n            <img className=\"icon\" alt=\"like\" src={like} />\r\n            <span>{props.likes}</span>\r\n          </div>\r\n          <div className=\"icon-container\">\r\n            <img className=\"icon\" alt=\"repost\" src={repost} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\nimport './App.css';\nimport Post from './components/post';\n\nfunction App() {\n  const ANAKIN_IMAGE =\n    'https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg';\n  const RAY_IMAGE =\n    'https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale';\n\n  return (\n    <div className=\"App\">\n      <Post\n        author={{\n          name: 'Anakin Skywalker',\n          photo: ANAKIN_IMAGE,\n          nickname: '@dart_vader',\n        }}\n        content=\"WTF? Who is Ray? Why she is Skywalker? Luke...?\"\n        image={RAY_IMAGE}\n        date={'26 Feb'}\n        comments=\"482\"\n        retweets=\"146\"\n        likes=\"887\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}